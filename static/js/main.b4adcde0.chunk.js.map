{"version":3,"sources":["api/api.js","api/posts.js","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["BASE_URL","getPosts","fetch","then","response","json","result","data","getPostDetails","selectedPostId","PostsList","setPost","searchByUser","useState","posts","setPosts","viewDetails","setViewDetails","useEffect","filter","item","userId","className","map","key","id","title","type","classNames","PostsList__button","button","onClick","post","seeMore","defaultProps","request","path","options","getPostComments","resultArr","postId","addComment","name","email","body","method","JSON","stringify","NewCommentForm","getCommentsFromServer","comment","setComment","addNewComment","a","handleCommentSubmit","target","value","onSubmit","event","preventDefault","placeholder","onChange","required","PostDetails","postComments","setPostComments","selectedPost","setSelectedPost","hideComments","setHideComments","handleCommentDeletion","length","App","setSelectedPostId","setSearchByUser","ReactDOM","render","document","getElementById"],"mappings":"uWAAaA,EAAW,iCAEXC,EAAW,kBAAMC,MAAM,GAAD,OAAIF,EAAJ,WAChCG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIA,EAAOC,SCQZC,EAAiB,SAAAC,GAAc,OAAIP,MAAM,GAAD,OAChDF,EADgD,kBAC9BS,IAEpBN,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIA,EAAOC,SCTZG,G,MAAY,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aAAmB,EAC5BC,mBAAS,IADmB,mBAC/CC,EAD+C,KACxCC,EADwC,OAEhBF,mBAAS,GAFO,mBAE/CG,EAF+C,KAElCC,EAFkC,KAItDC,qBAAU,WACc,KAAjBN,EAOLX,IACGE,MAAK,SAAAG,GAAM,OAAIA,EAAOa,QAAO,SAAAC,GAAI,OAAIA,EAAKC,UAAYT,QACtDT,KAAKY,GARNd,IACGE,KAAKY,KAQT,CAACH,IAeJ,OACE,yBAAKU,UAAU,aACb,sCAEA,wBAAIA,UAAU,mBACXR,EAAMS,KAAI,SAAAH,GAAI,OACb,wBAAIE,UAAU,kBAAkBE,IAAKJ,EAAKK,IACxC,6BACE,2CACYL,EAAKC,OADjB,MAEG,KAEFD,EAAKM,OAER,4BACEC,KAAK,SACLL,UAAWM,IAAW,CACpBC,mBAAmB,EACnBC,QAAQ,IAEVC,QAAS,kBAjCL,SAACC,GACf,GAAIhB,IAAgBgB,EAAKP,GAIvB,OAHAd,EAAQ,KAAM,WACdM,EAAe,MAKjBT,EAAewB,EAAKP,IACpBR,EAAee,EAAKP,IACpBd,EAAQqB,EAAKP,GAAIO,GAuBQC,CAAQb,KAGrBJ,IAAgBI,EAAKK,GACjB,QACA,gBAepBf,EAAUwB,aAAe,CACvBtB,aAAc,G,2BC5EHuB,EAAU,SAACC,EAAMC,GAAP,OAAmBnC,MAAM,GAAD,OAAIF,GAAJ,OAAeoC,GAAQC,GACnElC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIA,EAAOC,SAEZ+B,EAAkB,SAAA7B,GAAc,OAAI0B,EAAQ,aACtDhC,MAAK,SAAAoC,GAAS,OAAIA,EAAUpB,QAC3B,SAAAC,GAAI,OAAIA,EAAKoB,SAAW/B,SAOfgC,EAAa,SAACD,EAAQE,EAAMC,EAAOC,GAAtB,OAA+BT,EAAQ,YAAa,CAC5EU,OAAQ,OACRD,KAAME,KAAKC,UAAU,CACnBP,SACAE,OACAC,QACAC,Y,cChBSI,G,MAAiB,SAAC,GAA+C,IAA7CvC,EAA4C,EAA5CA,eAAgBwC,EAA4B,EAA5BA,sBAA4B,EAC7CpC,mBAAS,CACrC6B,KAAM,GACNC,MAAO,GACPC,KAAM,KAJmE,mBACpEM,EADoE,KAC3DC,EAD2D,KAOrEC,EAAa,uCAAG,gCAAAC,EAAA,6DACZX,EAAsBQ,EAAtBR,KAAMC,EAAgBO,EAAhBP,MAAOC,EAASM,EAATN,KADD,SAGdH,EAAWhC,EAAgBiC,EAAMC,EAAOC,GAH1B,OAIpBK,EAAsBxC,GAJF,2CAAH,qDAOb6C,EAAsB,SAACC,GAAY,IAC/Bb,EAAgBa,EAAhBb,KAAMc,EAAUD,EAAVC,MAEdL,EAAW,2BACND,GADK,kBAEPR,EAAOc,MAIZ,OACE,0BACElC,UAAU,iBACVmC,SAAU,SAACC,GACTA,EAAMC,iBACNP,MAGF,yBAAK9B,UAAU,cACb,2BACEK,KAAK,OACLe,KAAK,OACLkB,YAAY,YACZtC,UAAU,wBACVkC,MAAON,EAAQR,KACfmB,SAAU,gBAAGN,EAAH,EAAGA,OAAH,OAAgBD,EAAoBC,OAIlD,yBAAKjC,UAAU,cACb,2BACEK,KAAK,QACLe,KAAK,QACLkB,YAAY,aACZtC,UAAU,wBACVkC,MAAON,EAAQP,MACfkB,SAAU,gBAAGN,EAAH,EAAGA,OAAH,OAAgBD,EAAoBC,OAIlD,yBAAKjC,UAAU,cACb,8BACEoB,KAAK,OACLkB,YAAY,oBACZtC,UAAU,wBACVkC,MAAON,EAAQN,KACfiB,SAAU,gBAAGN,EAAH,EAAGA,OAAH,OAAgBD,EAAoBC,IAC9CO,UAAQ,KAIZ,4BACEnC,KAAK,SACLL,UAAU,wCAFZ,oBC3DOyC,G,MAAc,SAAC,GAAwB,IAAtBtD,EAAqB,EAArBA,eAAqB,EACTI,mBAAS,MADA,mBAC1CmD,EAD0C,KAC5BC,EAD4B,OAETpD,mBAAS,MAFA,mBAE1CqD,EAF0C,KAE5BC,EAF4B,OAGTtD,oBAAS,GAHA,mBAG1CuD,EAH0C,KAG5BC,EAH4B,KAK3CC,EAAqB,uCAAG,WAAM7C,GAAN,SAAA4B,EAAA,sEFJUlB,EAAQ,aAAD,OEKzBV,GFLoD,CAC1EoB,OAAQ,WEGsB,OAE5BP,EAAgB7B,GACbN,KAAK8D,GAHoB,2CAAH,sDAmB3B,OARA/C,qBAAU,WACRoB,EAAgB7B,GACbN,KAAK8D,GAERzD,EAAeC,GACZN,KAAKgE,KACP,CAAC1D,IAECyD,GAAiBF,EAKpB,yBAAK1C,UAAU,eACb,6CAEA,6BAASA,UAAU,qBACjB,4BAAK4C,EAAaxC,OAClB,2BAAIwC,EAAatB,OAInB,6BAAStB,UAAU,yBACjB,4BACEK,KAAK,SACLL,UAAWM,IAAW,CACpBE,QAAQ,EACR,sBAAuBkC,EAAaO,SAEtCxC,QAAS,kBAAMsC,GAAiBD,KAI9BA,EAAY,eACAJ,EAAaO,OADb,4BAEAP,EAAaO,OAFb,cAOdH,GAEE,wBAAI9C,UAAU,qBACX0C,EAAazC,KAAI,SAAAH,GAAI,OACpB,wBAAIE,UAAU,yBAAyBE,IAAKJ,EAAKK,IAC/C,4BACEE,KAAK,SACLL,UAAU,oCACVS,QAAS,kBAAMuC,EAAsBlD,EAAKK,MAH5C,KAOA,2BAAIL,EAAKwB,YAQrB,iCACE,yBAAKtB,UAAU,6BACb,kBAAC,EAAD,CACEb,eAAgBA,EAChBwC,sBArEoB,WAC5BX,EAAgB7B,GACbN,KAAK8D,SAYD,eCyCIO,EAtEH,WAAO,IAAD,EAC4B3D,mBAAS,MADrC,mBACTJ,EADS,KACOgE,EADP,OAEwB5D,mBAAS,MAFjC,mBAETqD,EAFS,KAEKC,EAFL,OAGwBtD,mBAAS,GAHjC,mBAGTD,EAHS,KAGK8D,EAHL,KAUhB,OACE,yBAAKpD,UAAU,OACb,4BAAQA,UAAU,eAChB,qDAGE,4BACEA,UAAU,qBACVkC,MAAO5C,EACPiD,SAAU,gBAAGN,EAAH,EAAGA,OAAH,OAAgBmB,EAAgBnB,EAAOC,SAEjD,4BAAQA,MAAO,GAAf,OAEA,4BAAQA,MAAO,GAAf,iBAEA,4BAAQA,MAAO,GAAf,gBAEA,4BAAQA,MAAO,GAAf,oBAEA,4BAAQA,MAAO,GAAf,oBAEA,4BAAQA,MAAO,GAAf,oBAEA,4BAAQA,MAAO,GAAf,wBAEA,4BAAQA,MAAO,GAAf,mBAEA,4BAAQA,MAAO,GAAf,4BAEA,4BAAQA,MAAO,GAAf,mBAEA,4BAAQA,MAAO,IAAf,oBAKN,0BAAMlC,UAAU,aACd,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEX,QA5CM,SAAC6B,EAAQR,GACvByC,EAAkBjC,GAClB2B,EAAgBnC,IA2CRpB,aAAcA,KAIlB,yBAAKU,UAAU,iBAEVb,GAEC,kBAAC,EAAD,CACEA,eAAgBA,EAChByD,aAAcA,QC7D9BS,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.b4adcde0.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const getPosts = () => fetch(`${BASE_URL}/posts`)\n  .then(response => response.json())\n  .then(result => result.data);\n","import { BASE_URL } from './api';\n\nexport const getUserPost = selectedPostId => fetch(`${BASE_URL}/comments`)\n  .then(response => response.json())\n  .then(result => result.data)\n  .then(resultArr => resultArr.filter(\n    item => item.postId && (item.body.trim() !== ''),\n  ))\n  .then(resultFiltered => resultFiltered.filter(\n    item => item.postId === selectedPostId,\n  ));\n\nexport const getPostDetails = selectedPostId => fetch(\n  `${BASE_URL}/posts/${selectedPostId}`,\n)\n  .then(response => response.json())\n  .then(result => result.data);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { getPosts } from '../../api/api';\nimport { getPostDetails } from '../../api/posts';\nimport './PostsList.scss';\n\nexport const PostsList = ({ setPost, searchByUser }) => {\n  const [posts, setPosts] = useState([]);\n  const [viewDetails, setViewDetails] = useState(0);\n\n  useEffect(() => {\n    if (+searchByUser === 0) {\n      getPosts()\n        .then(setPosts);\n\n      return;\n    }\n\n    getPosts()\n      .then(result => result.filter(item => item.userId === +searchByUser))\n      .then(setPosts);\n  }, [searchByUser]);\n\n  const seeMore = (post) => {\n    if (viewDetails === post.id) {\n      setPost(null, null);\n      setViewDetails(null);\n\n      return;\n    }\n\n    getPostDetails(post.id);\n    setViewDetails(post.id);\n    setPost(post.id, post);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(item => (\n          <li className=\"PostsList__item\" key={item.id}>\n            <div>\n              <b>\n                {`[User ${item.userId}]:`}\n                {' '}\n              </b>\n              {item.title}\n            </div>\n            <button\n              type=\"button\"\n              className={classNames({\n                PostsList__button: true,\n                button: true,\n              })}\n              onClick={() => seeMore(item)}\n            >\n              {\n                viewDetails === item.id\n                  ? 'Close'\n                  : 'Open'\n              }\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  setPost: PropTypes.func.isRequired,\n  searchByUser: PropTypes.number,\n};\n\nPostsList.defaultProps = {\n  searchByUser: 0,\n};\n","import { BASE_URL } from './api';\n\nexport const request = (path, options) => fetch(`${BASE_URL}${path}`, options)\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const getPostComments = selectedPostId => request('/comments')\n  .then(resultArr => resultArr.filter(\n    item => item.postId === selectedPostId,\n  ));\n\nexport const deleteComment = commentId => request(`/comments/${commentId}`, {\n  method: 'DELETE',\n});\n\nexport const addComment = (postId, name, email, body) => request(`/comments`, {\n  method: 'POST',\n  body: JSON.stringify({\n    postId,\n    name,\n    email,\n    body,\n  }),\n});\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { addComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ selectedPostId, getCommentsFromServer }) => {\n  const [comment, setComment] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const addNewComment = async() => {\n    const { name, email, body } = comment;\n\n    await addComment(selectedPostId, name, email, body);\n    getCommentsFromServer(selectedPostId);\n  };\n\n  const handleCommentSubmit = (target) => {\n    const { name, value } = target;\n\n    setComment({\n      ...comment,\n      [name]: value,\n    });\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        addNewComment();\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={comment.name}\n          onChange={({ target }) => handleCommentSubmit(target)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={comment.email}\n          onChange={({ target }) => handleCommentSubmit(target)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={comment.body}\n          onChange={({ target }) => handleCommentSubmit(target)}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n  getCommentsFromServer: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, deleteComment } from '../../api/comments';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [postComments, setPostComments] = useState(null);\n  const [selectedPost, setSelectedPost] = useState(null);\n  const [hideComments, setHideComments] = useState(false);\n\n  const handleCommentDeletion = async(id) => {\n    await deleteComment(id);\n    getPostComments(selectedPostId)\n      .then(setPostComments);\n  };\n\n  const getCommentsFromServer = () => {\n    getPostComments(selectedPostId)\n      .then(setPostComments);\n  };\n\n  useEffect(() => {\n    getPostComments(selectedPostId)\n      .then(setPostComments);\n\n    getPostDetails(selectedPostId)\n      .then(setSelectedPost);\n  }, [selectedPostId]);\n\n  if (!selectedPost || !postComments) {\n    return 'Loading...';\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <h3>{selectedPost.title}</h3>\n        <p>{selectedPost.body}</p>\n\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className={classNames({\n            button: true,\n            'button--visibility': !postComments.length,\n          })}\n          onClick={() => setHideComments(!hideComments)}\n\n        >\n          {\n            hideComments\n              ? `Show ${postComments.length} comments`\n              : `Hide ${postComments.length} comments`\n          }\n        </button>\n\n        {\n          hideComments\n          || (\n            <ul className=\"PostDetails__list\">\n              {postComments.map(item => (\n                <li className=\"PostDetails__list-item\" key={item.id}>\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => handleCommentDeletion(item.id)}\n                  >\n                    X\n                  </button>\n                  <p>{item.body}</p>\n                </li>\n              ))}\n            </ul>\n          )\n        }\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPostId={selectedPostId}\n            getCommentsFromServer={getCommentsFromServer}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const [selectedPostId, setSelectedPostId] = useState(null);\n  const [selectedPost, setSelectedPost] = useState(null);\n  const [searchByUser, setSearchByUser] = useState(0);\n\n  const setPost = (postId, post) => {\n    setSelectedPostId(postId);\n    setSelectedPost(post);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={searchByUser}\n            onChange={({ target }) => setSearchByUser(target.value)}\n          >\n            <option value={0}>All</option>\n\n            <option value={1}>Leanne Graham</option>\n\n            <option value={2}>Ervin Howell</option>\n\n            <option value={3}>Clementine Bauch</option>\n\n            <option value={4}>Patricia Lebsack</option>\n\n            <option value={5}>Chelsey Dietrich</option>\n\n            <option value={6}>Mrs. Dennis Schulist</option>\n\n            <option value={7}>Kurtis Weissnat</option>\n\n            <option value={8}>Nicholas Runolfsdottir V</option>\n\n            <option value={9}>Glenna Reichert</option>\n\n            <option value={10}>Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            setPost={setPost}\n            searchByUser={searchByUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {\n            !selectedPostId\n            || (\n              <PostDetails\n                selectedPostId={selectedPostId}\n                selectedPost={selectedPost}\n              />\n            )\n          }\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}